{
    "collab_server" : "",
    "contents" : "#------------------------------------------------1) Preparation---------------------------------------------------\n#install these packages if not existent already\n#install.packages('openair')\n#install.packages('ggmap')\n\n#load libraries\nlibrary(OpenStreetMap)\nlibrary(sp)\nlibrary(rgeos)\nlibrary(tmap)\nlibrary(tmaptools)\nlibrary(sf)\nlibrary(rgdal)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(geosphere)\nlibrary(openair)\nlibrary(jsonlite)\nlibrary(gstat)\nlibrary(scales)\nlibrary(ggmap)\n\n#set directory\n#setwd(\"~/Desktop/yourfolder\")\n\n#-------------------------------------2) insert your Google location history here--------------------------------\n#insert json\nx <- fromJSON(\"Location History.json\")\n\n#set desired date\nddate <-\"2017-12-11\"\n\n#set desired pollutants. nox, no2, pm10 can be loaded (note: pm10 has only few measurements). \npollutants <- 'no2'\n\n#-------------------------------------3) preparation of Google location history--------------------------------\n#subsets location and time\nloc <-  x$locations\n\n#this transforms coordinates into long/lat. 'E7' notation means that 10^7 needs to be multiplied get the actual number\n#source: https://stackoverflow.com/questions/30610225/how-do-i-read-my-google-location-history-in-r\nloc$lat = loc$latitudeE7 / 1e7\nloc$lon = loc$longitudeE7 / 1e7\n\n#converts posix milliseconds into a readable format\nloc$time = as.POSIXct(as.numeric(x$locations$timestampMs)/1000, \n                      origin = \"1970-01-01\")\n#separate date\nloc$date_only <- format(loc$time,\"%Y-%m-%d\")\nloc$date_only <- as.POSIXct(loc$date_only)\n\n#subset desired date\nlocDay <- loc[loc['date_only']== ddate,]\n\n#calculate distance from one point to the next\nlen <- nrow(locDay)\n\nlocDay[1:len-1,13] <- distGeo(locDay[1:len-1,9:10],locDay[2:len,9:10])\nnames(locDay)[13] <-\"distance in m\"\nlocDay[13] <- round(locDay['distance in m'], 2)\n\n#delete all FIRST points that have a distance of > 50 to the second point \nlocDaygen <- locDay[locDay['distance in m']> 50.00 & !is.na(locDay['distance in m'])== TRUE,]\n\n#add a column with hours only\nlocDaygen$hour_of_day <- strftime(locDaygen$time,format=\"%H\")\nlocDaygen$hour_of_day <- as.numeric(locDaygen$hour_of_day)\n\n#add 1 hour to each result\nlocDaygen$hour_of_day <- locDaygen$hour_of_day + 1\n\n#-----------------------------4) load/prepare pollution data from Kings College (just METADATA)-------------------------\n#import metadata\nmeta <- importMeta(source = \"kcl\", all = TRUE)\n\n#remove values with n/a in longitude column\nmeta <- meta[!is.na(meta$longitude),] &\n  \n#keep only n/a in closing date column (only stations that are still open)\nmeta <- meta[is.na(meta$ClosingDate),]\n\n#convert dataframe into a SpatialPointsDataFrame (you need to assign latlong first!)\n# coordMet <- meta[,c('longitude','latitude')]\n# meta.spdf <- SpatialPointsDataFrame(coords = coordMet, data = meta,\n#                                     proj4string = CRS(latlong))\n# \n# #find a centroid in inner London to make a buffer\n# centercoord <- as.data.frame(cbind(-0.11655807495117188,51.516327553914564))\n# center <- SpatialPointsDataFrame(coords=centercoord, data=centercoord, proj4string = CRS(latlong))\n# \n# #make buffer around centroid\n# rad <-15000\n# center15km <- spTransform(center, CRS=CRS(UTM))\n# center15km <- gBuffer(center15km, width=rad)\n# center15km <- spTransform(center15km, CRS=CRS(latlong))\n# plot(center15km)\n# \n# #find stations within buffer\n# metaSF <- st_as_sf(meta.spdf)\n# center15kmSF <- st_as_sf(center100km)\n# withinBuffr2 <-  st_intersection(metaSF, center15kmSF)\n# \n# #append to list and delete the ones that are not within buffer\n# stationCodes <- as.data.frame(subset(withinBuffr2['code']))\n# stationCodes <-subset(stationCodes['code'])\n# stationCodes <- unname(unlist(stationCodes))\n# stationCodes <- as.character(stationCodes)\n# stationCodes <- unique(stationCodes)\n\n#for some reason importKCL() doesn not accept stationCodes above. therefore, stations had to be subsetted manually\nmeasurements_stations <- c(\"CT6\", \"TH2\", \"CT8\", \"WA2\" ,\"BT4\" ,\"WM5\" ,\"LB4\" ,\"MY7\" ,\"BT5\" ,\"EN5\", \"BL0\", \"WM0\" ,\"GR9\" ,\"KC7\", \"EA8\",\"CD1\", \"IS2\", \"KC1\", \"LW1\", \"LW2\",\"MY1\",\n                           \"HG4\", \"RB4\", \"RI1\", \"RI2\" ,\"CR5\", \"EN1\", \"EN4\", \"GR7\", \"HG1\", \"HK6\", \"EA6\",\"LB5\" ,\"ST5\", \"MR3\" ,\"GR8\", \"BT6\",\"GN0\", \"TH4\", \"CT3\", \"IS6\", \n                           \"WAA\", \"NK3\", \"ME2\", \"CD9\", \"WM6\" ,\"WA9\", \"WA8\",\"MY4\", \"CT2\", \"CT4\", \"EI1\", \"WA7\", \"LW4\",\"HFX\", \"NK9\",\"ST8\",\n                           \"WAB\", \"LB6\", \"CR8\", \"BT8\", \"MR9\", \"NB1\", \"HFY\", \"WAC\", \"ME9\",\"GN5\", \"SK5\", \"NK6\", \"EI3\", \"BT0\", \"TH0\", \"IM1\")\n\n#-------------------------5) load/prepare pollution data from Kings College (actual data) -----------------------------\n\n#this is data for an area per hour KCL forn NO2\npollution <- importKCL(site = measurements_stations, year = 2017, pollutant = pollutants, met = FALSE,\n                          units = \"mass\", extra = FALSE, meta = TRUE)\n\n#subset the date from time and make new column\npollution$date_only <- format(pollution$date,\"%Y-%m-%d\")\n\n#convert to datetime format\npollution$date_only <- as.POSIXct(pollution$date_only)\n\n#subset desired day\npollutionDay <- pollution[pollution['date_only']== ddate,]\n\n#delete rows with n/a values\npollutionDay <- pollutionDay[!is.na(pollutionDay[pollutants])== TRUE,]\n\n#change pollution name for idw\nnames(pollutionDay)[2]<-'poll'\n\n#---------------------------6) prepare location history and air pollution data for IDW -----------------------------\n#bin location history data by hour\nlocBinned <-  by(locDaygen, locDaygen$hour_of_day, data.frame)\n\n#bin pollution data, use location history data as index (+ 1 because eg 10.00 am is at index 11)\npollBinned <-  by(pollutionDay, pollutionDay$date, data.frame)[unique(locDaygen$hour_of_day)+1]\n\n#-------------------------------------------7) make a IDW for each hour----------------------------------------\n#save wgs projection\nlatlong <- \"+init=epsg:4326\"\n\n#set up function\nmyIDW <- function(x,y){\n  #transforms location history to spatial\n  locBin<- SpatialPointsDataFrame(coords = x[,c(\"lon\",\"lat\")], data=x, proj4string = CRS(latlong))\n  #transforms air pollution data to spatial\n  pollBin <-  SpatialPointsDataFrame(coords = y[,c('longitude','latitude')], data=y, proj4string = CRS(latlong))\n  #IDW formula\n  IDWoutput <- idw(formula = pollBin$poll~ 1, locations=pollBin, newdata=locBin, idp=2)\n  return(IDWoutput)\n}\n\n#apply function to both dataframes\nIDWout <- mapply(myIDW,locBinned, pollBinned)\n\n#concatenate IDW list of dataframes\nIDWconc <-  do.call(rbind, IDWout)\nIDWconc <- as.data.frame(IDWconc)\n\n#change name back\nnames(IDWconc)[3] <- pollutants\n\n#append IDW preductions to location history data\nlocDayPred<-merge(x=IDWconc,locDaygen, by = c(\"lon\",\"lat\"))\n\n#---------------------------------------------8) set up theme for ggplot--------------------------------------------------\n#create a custom theme\ncustomtheme <- theme(\n  text = element_text(family = \"Helvetica\", color = \"#636363\"),\n  axis.line = element_blank(),\n  #long/ lat values\n  axis.text.x = element_text(color = \"#636363\"),\n  axis.text.y = element_text(color = \"#636363\"),\n  axis.ticks = element_line(color = \"#ebebe5\", size = 0.2),\n  #axis titles\n  axis.title.x = element_text(color = \"#636363\"),\n  axis.title.y = element_text(color = \"#636363\"),\n  panel.grid.major = element_line(color = \"#ebebe5\", size = 0.2),\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(fill = \"#f5f5f2\", color = NA), \n  panel.background = element_rect(fill = \"#f5f5f2\", color = NA), \n  legend.background = element_rect(fill = \"#f5f5f2\", color = NA),\n  legend.text  = element_text(size = 8,color = \"#636363\")\n)\n\n#---------------------------------------------9) plotting timeseries----------------------------------------------------\n#adaptable titles\nchart_title <- paste(pollutants, \" exposure on \", ddate)\naxis_title <- paste(pollutants, \" ug/m3 \")\n\n#this the the time series plot\nlayer9 <- ggplot(locDayPred, aes(time, locDayPred[,3], color='red')) +\n  geom_line(size=1, show.legend = FALSE) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_x_datetime(labels = date_format(\"%H:%M:%S\"),breaks = date_breaks(\"30 min\")) + customtheme + labs(x = 'Time', y = axis_title, title = chart_title )\n\nggsave(\"myplot.png\")\n\n#---------------------------------------------10) plotting map----------------------------------------------------\n#set mean of coordinates to center the ggmap\nlat1 <- mean(locDayPred[,2])\nlon1 <- mean(locDayPred[,1])\n\n#set up map\n#get_map seems pretty buggy, there will be warnings popping up...\nmap <- get_map(location = c(lon = lon1, lat = lat1), maptype = \"toner-lines\",zoom = 12, color = \"bw\",source = \"stamen\")\nlayer3<-geom_jitter(data=locDayPred, position=position_jitter(width=0.004, height=0.004), alpha = 0.8, aes(x=lon, y=lat,color=locDayPred[3]), size=3)\n\n#palette\npalette2 <- scale_colour_gradient(low = \"#9ecae1\", high = \"red\",name = pollutants)\n\n#plot\nggmap(map)+layer3 + palette2 + customtheme + labs(x= 'longitude', y='latitude', title = chart_title)\n\nggsave(\"myplot-map.png\")",
    "created" : 1514836130654.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2230141212",
    "id" : "BC1B90A8",
    "lastKnownWriteTime" : 1515283825,
    "last_content_update" : 1515283825,
    "path" : "~/Documents/Studium/Bartlett/02 Classes/Geographic Information Systems and Science/Coursework 1/GIS_tool/script_1.R",
    "project_path" : "script_1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}